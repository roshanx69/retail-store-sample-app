apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: retail-store-ingress
  namespace: store-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  ingressClassName: nginx
  rules:
  - host: retail-store.local
    http:
      paths:
      # Main UI - Frontend
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ui
            port:
              number: 8080
      
      # API Routes
      - path: /api/catalog
        pathType: Prefix
        backend:
          service:
            name: catalog
            port:
              number: 8082
      
      - path: /api/cart
        pathType: Prefix
        backend:
          service:
            name: cart
            port:
              number: 8081
      
      - path: /api/orders
        pathType: Prefix
        backend:
          service:
            name: orders
            port:
              number: 8083
      
      - path: /api/checkout
        pathType: Prefix
        backend:
          service:
            name: checkout
            port:
              number: 8084
      
      # Health check endpoints
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: ui
            port:
              number: 8080
---
# Alternative ingress for production with SSL
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: retail-store-ingress-ssl
#   namespace: store-app
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
#     nginx.ingress.kubernetes.io/ssl-redirect: "true"
#     nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
#     cert-manager.io/cluster-issuer: "letsencrypt-prod"
#     nginx.ingress.kubernetes.io/cors-allow-origin: "*"
#     nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
#     nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
#     nginx.ingress.kubernetes.io/enable-cors: "true"
#     nginx.ingress.kubernetes.io/rate-limit: "1000"
#     nginx.ingress.kubernetes.io/rate-limit-window: "1m"
#     nginx.ingress.kubernetes.io/client-max-body-size: "10m"
# spec:
#   ingressClassName: nginx
#   tls:
#   - hosts:
#     - retail-store.example.com
#     secretName: retail-store-tls
#   rules:
#   - host: retail-store.example.com
#     http:
#       paths:
#       # Main UI - Frontend
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: ui
#             port:
#               number: 8080
      
#       # API Routes
#       - path: /api/catalog
#         pathType: Prefix
#         backend:
#           service:
#             name: catalog
#             port:
#               number: 8082
      
#       - path: /api/cart
#         pathType: Prefix
#         backend:
#           service:
#             name: cart
#             port:
#               number: 8081
      
#       - path: /api/orders
#         pathType: Prefix
#         backend:
#           service:
#             name: orders
#             port:
#               number: 8083
      
#       - path: /api/checkout
#         pathType: Prefix
#         backend:
#           service:
#             name: checkout
#             port:
#               number: 8084
